/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fileswing;

import java.awt.GridLayout;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author SAMSUNG
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    File head;
    String filename;
    ArrayList<JCheckBox> checkBoxList;
    String foldername;
    String firstheader="C:\\Users\\SAMSUNG\\Desktop\\foldertry";//file header to modify dynamically based on the current folder, each time we travel to a current folder we update this string so that the buttons manage the current paths. being global won't affect because we keep accessing functions, including the initComponents
    int x,y;
    int xMargin = 5;
     int yMargin = 5;
       int checkBoxWidth = 90;
        int checkBoxHeight = 20;
     JPanel contentPanel;
     ArrayList<String> folderUrls = new ArrayList<>();
    public NewJFrame() {
    initComponents();
    folderUrls = new ArrayList<>();
    folderUrls.add(firstheader);
    checkBoxList = new ArrayList<>();
    header.setText(firstheader);
    head = new File(firstheader);
        String get[] = head.list();
       
         contentPanel = new JPanel();
        contentPanel.setLayout(null); // Set layout to null for absolute positioning of components
        int filesPerLine = 3;
         x = xMargin;
         y = yMargin;

        for (String b : get) {
            JCheckBox checkBox = new JCheckBox(b);
            checkBox.setBounds(x, y, checkBoxWidth, checkBoxHeight);
            contentPanel.add(checkBox);
            checkBoxList.add(checkBox);
            x += checkBoxWidth + xMargin; // Move to the next column

            if ((x + checkBoxWidth) > scroller.getWidth()) {
                x = xMargin;
                y += checkBoxHeight + yMargin; // Move to the next row
            }
        }

        scroller.setViewportView(contentPanel);
        scroller.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroller.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        controller = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        scroller = new javax.swing.JScrollPane();
        header = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        controller.setBackground(new java.awt.Color(51, 255, 153));

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        header.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scroller, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
            .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scroller, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton1.setText("Create file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Create folder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Modify");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("View");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Close");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Go back path");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controllerLayout = new javax.swing.GroupLayout(controller);
        controller.setLayout(controllerLayout);
        controllerLayout.setHorizontalGroup(
            controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controllerLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        controllerLayout.setVerticalGroup(
            controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(controllerLayout.createSequentialGroup()
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controller, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void fillthefile(String str){
        filename=str;
        try{
            createfiles();
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
public void fillthefolder(String str){
        foldername=str;
         try{
            createfolders();
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
 public void createfiles() throws Exception {
    String url = firstheader + "\\" + filename;
    File f = new File(url);
    if (!f.createNewFile()) {
        JOptionPane.showMessageDialog(this, "file already exists");
    } else {
        updateScrollPane();
    }
}
 public void createfolders() throws Exception {
    String url = firstheader + "\\" + foldername;
    File f = new File(url);
    if (!f.mkdir()) {
        JOptionPane.showMessageDialog(this, "folder already exists");
    } else {
        updateScrollPane();
    }
}
private void updateScrollPane() {//usable for files and folder
    head = new File(firstheader);
    String[] get = head.list();

    JPanel contentPanel = new JPanel();
    contentPanel.setLayout(null);

    int xMargin = 5;
    int yMargin = 5;
    int checkBoxWidth = 90;
    int checkBoxHeight = 20;
    int x = xMargin;
    int y = yMargin;

    for (String b : get) {
        JCheckBox checkBox = new JCheckBox(b);
        checkBox.setBounds(x, y, checkBoxWidth, checkBoxHeight);
        contentPanel.add(checkBox);
        checkBoxList.add(checkBox);
        x += checkBoxWidth + xMargin;

        if ((x + checkBoxWidth) > scroller.getWidth()) {
            x = xMargin;
            y += checkBoxHeight + yMargin;
        }
    }

    scroller.setViewportView(contentPanel);
    scroller.revalidate();
    scroller.repaint();
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        filecreate f = new filecreate(this);
        f.receiveheader(firstheader);//sends the header to filecreate
        f.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        foldercreate f = new foldercreate(this);
        f.receiveheader(firstheader);
        f.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try{
         String get = null;
        for (JCheckBox checkBox : checkBoxList) {
            if (checkBox.isSelected()) {
                get = checkBox.getText();
                break;
            }
        }
        if (get != null) {// memo for tomorrow, add a go 
            String url = firstheader+"\\"+get;
     
            File fr= new File(url);
            if(fr.isDirectory()){
                     firstheader = firstheader+"\\"+get;  
               header.setText(url);
               folderUrls.add(url);
               checkBoxList.clear();
                contentPanel.removeAll();

                String[] filesInDirectory = fr.list();
                int x = xMargin;
                int y = yMargin;

                for (String file : filesInDirectory) {
                    JCheckBox checkBox = new JCheckBox(file);
                    checkBox.setBounds(x, y, checkBoxWidth, checkBoxHeight);
                    contentPanel.add(checkBox);
                    checkBoxList.add(checkBox);

                    x += checkBoxWidth + xMargin;
                    if ((x + checkBoxWidth) > scroller.getWidth()) {
                        x = xMargin;
                        y += checkBoxHeight + yMargin;
                    }
                }

                scroller.setViewportView(contentPanel);
                scroller.revalidate();
                scroller.repaint();
            }
            else{
            fileview f = new fileview();
            f.receiveheader(url,get);
            f.setVisible(true);
            //JOptionPane.showMessageDialog(this, "Selected checkbox: " + get);
            }
            } else {
            JOptionPane.showMessageDialog(this, "No checkbox selected.");
        }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
         if (folderUrls.size() > 1) { // Ensure there's a path to go back to (at least 2 URLs in the list)
        // Remove the current URL from the list
        folderUrls.remove(folderUrls.size() - 1);

        // Get the previous folder URL
        String previousUrl = folderUrls.get(folderUrls.size() - 1);
        firstheader= previousUrl;//to update the current path
        try {
            // Update header and load checkboxes for the previous folder URL
            header.setText(previousUrl);
            checkBoxList.clear();
            contentPanel.removeAll();

            File previousFolder = new File(previousUrl);
            if (previousFolder.isDirectory()) {
                String[] filesInPreviousFolder = previousFolder.list();
                int x = xMargin;
                int y = yMargin;

                for (String file : filesInPreviousFolder) {
                    JCheckBox checkBox = new JCheckBox(file);
                    checkBox.setBounds(x, y, checkBoxWidth, checkBoxHeight);
                    contentPanel.add(checkBox);
                    checkBoxList.add(checkBox);

                    x += checkBoxWidth + xMargin;
                    if ((x + checkBoxWidth) > scroller.getWidth()) {
                        x = xMargin;
                        y += checkBoxHeight + yMargin;
                    }
                }

                scroller.setViewportView(contentPanel);
                scroller.revalidate();
                scroller.repaint();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    try {
        String get = null;
        for (JCheckBox checkBox : checkBoxList) {
            if (checkBox.isSelected()) {
                get = checkBox.getText();
                break;
            }
        }
        if (get != null) {
            String url = firstheader + "\\" + get;
            File fileToDelete = new File(url);

            if (fileToDelete.isDirectory()) {
                // For folders
                if (deleteFolder(fileToDelete)) {
                    removeCheckboxFromPanel(get);
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete the folder.");
                }
            } else {
                // For files
                if (fileToDelete.delete()) {
                    removeCheckboxFromPanel(get);
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete the file.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No checkbox selected.");
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton4ActionPerformed

private boolean deleteFolder(File folder) {
    if (folder.isDirectory()) {
        File[] files = folder.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    // Recursively delete subdirectories
                    if (!deleteFolder(file)) {
                        return false;
                    }
                } else {
                    // Delete files within the directory
                    if (!file.delete()) {
                        return false;
                    }
                }
            }
        }
    }
    // Delete the folder after deleting its contents
    return folder.delete();
}

private void removeCheckboxFromPanel(String checkboxText) {
    JCheckBox checkboxToRemove = null;
    for (JCheckBox checkBox : checkBoxList) {
        if (checkBox.getText().equals(checkboxText)) {
            checkboxToRemove = checkBox;
            break;
        }
    }

    if (checkboxToRemove != null) {
        checkBoxList.remove(checkboxToRemove);
        contentPanel.remove(checkboxToRemove);

         x = xMargin;
         y = yMargin;

        for (JCheckBox checkBox : checkBoxList) {
            checkBox.setBounds(x, y, checkBoxWidth, checkBoxHeight);
            contentPanel.add(checkBox);

            x += checkBoxWidth + xMargin;
            if ((x + checkBoxWidth) > scroller.getWidth()) {
                x = xMargin;
                y += checkBoxHeight + yMargin;
            }
        }

        scroller.setViewportView(contentPanel);
        scroller.revalidate();
        scroller.repaint();
    } else {
        JOptionPane.showMessageDialog(this, "Checkbox not found.");
    }
}
String receivenewname;
String currname;
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
        String get = null;
        for (JCheckBox checkBox : checkBoxList) {
            if (checkBox.isSelected()) {
                get = checkBox.getText();
                break;
            }
        }
        if (get != null) {
            currname = get; // Store the current name
            String newName = JOptionPane.showInputDialog(this, "Enter new name:");
            if (newName != null && !newName.isEmpty()) {
                renameFiles(newName);
            } else {
                JOptionPane.showMessageDialog(this, "Invalid name!");
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton3ActionPerformed
public void renameFiles(String newName) {
    receivenewname = newName;
    File f = new File(firstheader + "\\" + currname);
    if (f.exists()) {
        if (f.isDirectory()) {
            renameFolder(f, newName);
        } else {
            renameFile(f, newName);
        }
    } else {
        JOptionPane.showMessageDialog(this, "File/Folder not found!");
    }
}

private void renameFile(File file, String newName) {
    File newFile = new File(file.getParentFile(), newName);
    if (file.renameTo(newFile)) {
        updateCheckboxAfterRename(file.getName(), newName);
    } else {
        JOptionPane.showMessageDialog(this, "Failed to rename the file.");
    }
}

private void renameFolder(File folder, String newName) {
    File newFolder = new File(folder.getParentFile(), newName);
    if (folder.renameTo(newFolder)) {
        updateCheckboxAfterRename(folder.getName(), newName);
    } else {
        JOptionPane.showMessageDialog(this, "Failed to rename the folder.");
    }
}

private void updateCheckboxAfterRename(String oldName, String newName) {
    for (int i = 0; i < checkBoxList.size(); i++) {
        JCheckBox checkBox = checkBoxList.get(i);
        if (checkBox.getText().equals(oldName)) {
            checkBox.setText(newName);
            contentPanel.remove(checkBox); // Remove the old checkbox
            checkBoxList.remove(i); // Remove from the list

            // Create a new checkbox with the updated name
            JCheckBox updatedCheckBox = new JCheckBox(newName);
            updatedCheckBox.setBounds(x, y, checkBoxWidth, checkBoxHeight);
            contentPanel.add(updatedCheckBox);
            checkBoxList.add(i, updatedCheckBox); // Add to the same position
            x += checkBoxWidth + xMargin;

            if ((x + checkBoxWidth) > scroller.getWidth()) {
                x = xMargin;
                y += checkBoxHeight + yMargin;
            }
        }
    }

    scroller.setViewportView(contentPanel);
    scroller.revalidate();
    scroller.repaint();
}
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controller;
    private javax.swing.JLabel header;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JScrollPane scroller;
    // End of variables declaration//GEN-END:variables
}
